#!/usr/bin/env python

from descarteslabs.services import Raster
import argparse


def scales(s):
    try:
        if s.count(",") == 1:
            mi, ma = map(float, s.split(","))
            return [mi, ma]
        elif s.count(",") == 3:
            smi, sma, dmi, dma = map(float, s.split(","))
            return [smi, sma, dmi, dma]
        else:
            raise
    except:
        raise argparse.ArgumentTypeError(
            "Scales must be mi,ma or smi,sma,dmi,dma"
        )


if __name__ == "__main__":

    parser = argparse.ArgumentParser()
    parser.add_argument("-keys", default="meta_LC80270312016188_v1", type=str, nargs="+")
    parser.add_argument("-bands", nargs="+", default=None, type=str)
    parser.add_argument("-scales", default=None, type=scales, nargs="+")
    parser.add_argument("-resolution", default=240, type=float)
    parser.add_argument("-of", default='GTiff', type=str)
    parser.add_argument("-ot", default='UInt16', type=str)
    parser.add_argument("-location", default=None, type=str)

    args = parser.parse_args()

    raster = Raster()
    params = {
        'keys': args.keys,
        'bands': args.bands,
        'scales': args.scales,
        'resolution': args.resolution,
        'ot': args.ot,
        'of': args.of,
        'location': args.location,
    }
    response = raster.raster(**params)
    for filename, data in response['files'].iteritems():
        with open(filename, "w") as f:
            f.write(data)
    print(response['metadata'])
